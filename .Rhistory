# install.packages("pageviews")
# install.packages("jsonlite")
# install.packages("lubridate")
library(jsonlite)
library(pageviews)
library(lubridate)
library(dplyr)
library(forecast)
library(urca)
library(TSstudio)
rm(list = ls())
project = "en.wikipedia.org"
access = "all-access"
agent = "all-agents"
granularity = "daily"
start = "2015010100"
end = "2022013123"
url_daily = sprintf("https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate/%s/%s/%s/%s/%s/%s", project, access, agent, granularity, start, end)
url_hourly = sprintf("https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate/%s/%s/%s/%s/%s/%s", project, access, agent, "hourly", start, end)
daily_data = fromJSON(txt=url_daily)$items
hourly_data = fromJSON(txt= url_hourly)$items
msts_wiki_daily <- daily_data$views %>%
msts(seasonal.periods = c(7, 365),
start = decimal_date(as.Date("2015-07-01")))
autoplot(msts_wiki_daily)
wiki_daily_decomp <- mstl(msts_wiki_daily)
autoplot(wiki_daily_decomp)
seasadj_wiki <- seasadj(wiki_daily_decomp)
#Test stat = 0.0094
seasadj_wiki %>%
diff(lag =1)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0149
seasadj_wiki %>%
diff(lag =7)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0055
seasadj_wiki %>%
diff(lag =7)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
#Test stat = 1.2046
seasadj_wiki %>%
diff(lag =365)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0117
seasadj_wiki %>%
diff(lag =365)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
trans_seasadj_wiki <- seasadj_wiki %>% diff(lag = 7)
autoplot(trans_seasadj_wiki)
seasadj_wiki %>%
diff(lag =365)%>%
ur.kpss()%>%
summary()
seasadj_wiki %>%
diff(lag =30)%>%
ur.kpss()%>%
summary()
#Test stat = 1.2046
seasadj_wiki %>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
seasadj_wiki %>%
diff(lag =7)%>%
ur.kpss()%>%
summary()
m1 <- Arima(msts_wiki_daily,order=c(2,0,3),
seasonal = list(order = c(1,1,2), period = 1))
m1
m1 <- Arima(msts_wiki_daily,order=c(2,1,3),
seasonal = list(order = c(1,1,2)))
m1 <- Arima(msts_wiki_daily,order=c(2,1,3),
seasonal = list(order = c(1,1,2), period = 1))
m1
checkresiduals(forecast(m1))
checkresiduals(forecast(m1))
auto.arima(ts(seasadj_wiki, frequency = 7))
m0 <- auto.arima(ts(seasadj_wiki, frequency = 7))
#Benchmark Models (Need to clarify with Prof on how to transform back after we only apply differencing to seasonal adjusted component. Refer to Lecture 6 hmwk 2 code (he applied differencing to time series before decomposition))
#ARIMA Models
ggtsdisplay(trans_seasadj_wiki)
Pacf(trans_seasadj_wiki)
Acf(trans_seasadj_wiki)
#Testing out Seasonal ARIMA with stlm. NEED HELP WITH READING ACF & PACF!!!
#GRILL PROF ON THURSDAY
m0 <- auto.arima(ts(seasadj_wiki, frequency = 7)) #(4,1,1)(2,0,2)
m0
m1 <- Arima(msts_wiki_daily,order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7))
m1
m2 <- Arima(msts_wiki_daily,order=c(2,0,3),
seasonal = list(order = c(0,1,2), period = 7))
m2
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
m0
m1 <- Arima(seasadj_wiki,order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7))
m1
m2 <- Arima(seasadj_wiki,order=c(2,0,3),
seasonal = list(order = c(0,1,2), period = 7))
m2
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
wiki_daily_split <- ts_split(msts_wiki_daily, sample.out = 482)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(0,1,2), period = 7), robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(0,1,2), period = 7), robust = T)
checkresiduals(forecast(f2))
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7), robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7), robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(2,0,2), period = 7), robust = T)
checkresiduals(forecast(f2))
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
checkresiduals(forecast(f2))
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,0,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,0,2), period = 7), robust = T)
checkresiduals(forecast(f1))
m2 <- Arima(seasadj_wiki,order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7))
m1 <- Arima(seasadj_wiki,order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7))
m1
m2 <- Arima(seasadj_wiki,order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7))
m2
autoplot(msts_wiki_daily)+autolayer(forecast(f1), PI = F)
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
m0
m0
m1 <- Arima(seasadj_wiki,order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7))
m1
m2 <- Arima(seasadj_wiki,order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7))
m2
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,1),
seasonal = list(order = c(2,0,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T, lambda = "auto")
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T, lambda = "auto")
checkresiduals(forecast(f1))
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto", robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto", robust = T)
checkresiduals(forecast(f2))
?stlm
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto", biasadj = T, robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto", biasadj = T, robust = T)
checkresiduals(forecast(f2))
m1 <- Arima(seasadj_wiki,order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto")
m1 <- Arima(seasadj_wiki,order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), lambda = "auto")
m1
# install.packages("pageviews")
# install.packages("jsonlite")
# install.packages("lubridate")
library(jsonlite)
library(pageviews)
library(lubridate)
library(dplyr)
library(forecast)
library(urca)
library(TSstudio)
rm(list = ls())
project = "en.wikipedia.org"
access = "all-access"
agent = "all-agents"
granularity = "daily"
start = "2015010100"
end = "2022013123"
url_daily = sprintf("https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate/%s/%s/%s/%s/%s/%s", project, access, agent, granularity, start, end)
url_hourly = sprintf("https://wikimedia.org/api/rest_v1/metrics/pageviews/aggregate/%s/%s/%s/%s/%s/%s", project, access, agent, "hourly", start, end)
daily_data = fromJSON(txt=url_daily)$items
hourly_data = fromJSON(txt= url_hourly)$items
msts_wiki_daily <- daily_data$views %>%
msts(seasonal.periods = c(7, 365),
start = decimal_date(as.Date("2015-07-01")))
autoplot(msts_wiki_daily)
wiki_daily_decomp <- mstl(msts_wiki_daily)
autoplot(wiki_daily_decomp)
autoplot(msts_wiki_daily)
autoplot(wiki_daily_decomp)
seasadj_wiki <- seasadj(wiki_daily_decomp)
#Test stat = 0.0094
seasadj_wiki %>%
diff(lag =1)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0149
seasadj_wiki %>%
diff(lag =7)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0055
seasadj_wiki %>%
diff(lag =7)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
#Test stat = 1.2046
seasadj_wiki %>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0117
seasadj_wiki %>%
diff(lag =365)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
trans_seasadj_wiki <- seasadj_wiki %>% diff(lag = 1)
autoplot(trans_seasadj_wiki)
ndiff(seasadj_wiki)
ndiffs(seasadj_wiki)
nsdiffs(seasadj_wiki)
#Test stat = 1.2046
seasadj_wiki %>%
diff(lag = 365)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0149
seasadj_wiki %>%
diff(lag =7)%>%
ur.kpss()%>%
summary()
autoplot(trans_seasadj_wiki)
autoplot(trans_seasadj_wiki)
ggseasonplot(trans_seasadj_wiki)
ggtsdisplay(trans_seasadj_wiki)
acf(trans_seasadj_wiki)
acf(trans_seasadj_wiki)
pacf(trans_seasadj_wiki)
ggtsdisplay(trans_seasadj_wiki)
ggtsdisplay(trans_seasadj_wiki)
ggseasonplot(trans_seasadj_wiki)
wiki_daily_split <- ts_split(msts_wiki_daily, sample.out = 482)
wiki_daily_decomp_train <- mstl(wiki_daily_split$train)
autoplot(wiki_daily_decomp_train)
autoplot(wiki_daily_split$train)
seasadj_wiki <- seasadj(wiki_daily_decomp_train)
#Test stat = 0.011
seasadj_wiki %>%
diff(lag =1)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0142
seasadj_wiki %>%
diff(lag =7)%>%
ur.kpss()%>%
summary()
#Test stat = 0.003
seasadj_wiki %>%
diff(lag =7)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
#Test stat = 2.2636
seasadj_wiki %>%
diff(lag = 365)%>%
ur.kpss()%>%
summary()
#Test stat = 0.0143
seasadj_wiki %>%
diff(lag =365)%>%
diff(lag = 1)%>%
ur.kpss()%>%
summary()
trans_seasadj_wiki <- seasadj_wiki %>% diff(lag = 1)
autoplot(trans_seasadj_wiki)
#Benchmark Models (Need to clarify with Prof on how to transform back after we only apply differencing to seasonal adjusted component. Refer to Lecture 6 hmwk 2 code (he applied differencing to time series before decomposition))
#ARIMA Models
ggtsdisplay(trans_seasadj_wiki)
Pacf(trans_seasadj_wiki)
Acf(trans_seasadj_wiki)
#Testing out Seasonal ARIMA with stlm. NEED HELP WITH READING ACF & PACF!!!
#GRILL PROF ON THURSDAY
auto.arima(ts(seasadj_wiki, frequency = 7)) #(4,1,1)(2,0,2)[7]
#Ask prof why does this not work. When I tried it on the seasonal adjusted comp. of full data by accident, this does not throw the Error in optim(init[mask], armafn, method = optim.method, hessian = TRUE, : non-finite finite-difference value [7]. Even when using stlm on training data there is no error. Why is it that when i use Arima on training data, in the below comment it doesn't work?
# m1 <-  Arima(seasadj_wiki, order=c(4,1,1), seasonal = list(order = c(2,0,2), period = 7))
f0 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,1),
seasonal = list(order = c(2,0,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,2),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
f3 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,1),
seasonal = list(order = c(1,1,2), period = 7), robust = T)
f4 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,1),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
f5 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(3,1,1),
seasonal = list(order = c(2,0,1), period = 7), robust = T)
checkresiduals(forecast(f0))
checkresiduals(forecast(f1))
checkresiduals(forecast(f2))
checkresiduals(forecast(f3))
checkresiduals(forecast(f4))
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f1), wiki_daily_split$test)
autoplot(msts_wiki_daily)+autolayer(forecast(f1), PI = F, alpha = 0.7, col = "red")
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,1,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
checkresiduals(forecast(f1))
f2 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(1,0,2), period = 7), robust = T)
checkresiduals(forecast(f2))
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(12,1,3),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(12,1,3),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(3,1,4),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(3,1,4),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
checkresiduals(forecast(f1))
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,3), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,3), period = 7), robust = T)
checkresiduals(forecast(f1))
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,0),
seasonal = list(order = c(2,1,0), period = 7), robust = T)
checkresiduals(forecast(f1))
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,0), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,0), period = 7), robust = T)
checkresiduals(forecast(f1))
checkresiduals(forecast(f1))
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,0,3), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,0,3), period = 7), robust = T)
checkresiduals(forecast(f1))
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
f1 = stlm(wiki_daily_split$train, modelfunction = Arima, order=c(4,1,3),
seasonal = list(order = c(2,1,2), period = 7), robust = T)
checkresiduals(forecast(f1))
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f1), wiki_daily_split$test)
autoplot(msts_wiki_daily)+autolayer(forecast
msts_wiki_daily
View(msts_wiki_daily)
2407-482
482/2407
checkresiduals(forecast(f0))
checkresiduals(forecast(f1))
checkresiduals(forecast(f2))
checkresiduals(forecast(f3))
checkresiduals(forecast(f4))
accuracy(forecast(f0), wiki_daily_split$test)
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
accuracy(forecast(f0), wiki_daily_split$test)
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
checkresiduals(forecast(f3))
checkresiduals(forecast(f4))
checkresiduals(forecast(f0))
uracy(forecast(f0), wiki_daily_split$test)
accuracy(forecast(f0), wiki_daily_split$test)
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
#Only f1 passed the Ljung-Box Test for the train set
accuracy(forecast(f0), wiki_daily_split$test)
accuracy(forecast(f1), wiki_daily_split$test)
accuracy(forecast(f2), wiki_daily_split$test)
